/**
 * @param {number} m
 * @param {number} n
 * @param {number[][]} guards
 * @param {number[][]} walls
 * @return {number}
*/
var countUnguarded = function (m, n, guards, walls) {
    // Create the grid and initialize it
    const grid = Array.from({ length: m }, () => Array(n).fill(0));
    // 0 = free, 1 = guard, 2 = wall, 3 = guardable

    // Mark guards and walls
    for (const [r, c] of guards) {
        grid[r][c] = 1; // Guard
    }
    for (const [r, c] of walls) {
        grid[r][c] = 2; // Wall
    }

    const markGuarded = (r, c) => {
        // Guard downwards
        for (let row = r + 1; row < m; row++) {
            if (grid[row][c] === 1 || grid[row][c] === 2) break;
            grid[row][c] = 3; // Guardable
        }
        // Guard upwards
        for (let row = r - 1; row >= 0; row--) {
            if (grid[row][c] === 1 || grid[row][c] === 2) break;
            grid[row][c] = 3; // Guardable
        }
        // Guard rightwards
        for (let col = c + 1; col < n; col++) {
            if (grid[r][col] === 1 || grid[r][col] === 2) break;
            grid[r][col] = 3; // Guardable
        }
        // Guard leftwards
        for (let col = c - 1; col >= 0; col--) {
            if (grid[r][col] === 1 || grid[r][col] === 2) break;
            grid[r][col] = 3; // Guardable
        }
    };
    // Mark guardable spaces for all guards
    for (const [r, c] of guards) {
        markGuarded(r, c);
    }

    // Count free spaces (0)
    let res = 0;
    for (const row of grid) {
        for (const cell of row) {
            if (cell === 0) res++;
        }
    }
    return res;
};

/** 
First Solution
//  Time complexity
//  1. Initialization of free array: 2D array so O(m x n)
//  2. Processing walls: w is the number of walls so O(w)
//  3. Processing guards: g is the number of guards so O(g)
//  4. Processing guards: each guard triggers check function in worst case
//         -each direction scans full grid (m+n) with g guards
//         -O(g x (m + n))
//  5. Overall = O(m x n + w + g x (m + n))

//  Space complexity
//  1. Space for the free array O(m x n)
//  2. total and loop variables are O(1)
//  3. Overall = O(m x n)

 
var countUnguarded = function(m, n, guards, walls) {
    let total = {value: m * n};
    let free = new Array(m).fill(0).map(()=>new Array(n).fill(true));
    for(let i = 0; i<walls.length; i++){ // wall spots are taken
        free[walls[i][0]][walls[i][1]] = 'taken';
        total.value--;
    }

    for(let i = 0; i<guards.length; i++){ // guard spots are taken
        free[guards[i][0]][guards[i][1]] = 'taken';
        total.value--;
    }

    for(let z = 0; z<guards.length; z++){
        check(free,m,n, guards[z], total)
    }
    return total.value;
};

var check = function(free,depth, length, guard, total){
    up = guard[0] - 1;
    right = guard[1] + 1;
    down = guard[0] + 1;
    left = guard[1] - 1;
    while(up >= 0 && free[up][guard[1]] != 'taken'){
        if(free[up][guard[1]] != false){
            free[up][guard[1]] = false;
            total.value--;
        }
        up--;
    }
    while(right < length && free[guard[0]][right] != 'taken'){
        if(free[guard[0]][right] != false){
            free[guard[0]][right] = false;
            total.value--;
        }
        right++;
    }
    while(down < depth && free[down][guard[1]] != 'taken'){
        if(free[down][guard[1]] != false){
            free[down][guard[1]] = false;
            total.value--;
        }
        down++;
    }
    while(left >= 0 && free[guard[0]][left] != 'taken'){
        if(free[guard[0]][left] != false){
            free[guard[0]][left] = false;
            total.value--;
        }
        left--;
    }
};
*/